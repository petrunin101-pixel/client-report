
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from pathlib import Path

st.set_page_config(page_title="Client Traffic & Sales Report", layout="wide")

st.title("üìä –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ—Ç—á—ë—Ç: —Ç—Ä–∞—Ñ–∏–∫, –≤–æ—Ä–æ–Ω–∫–∞, ROAS")

# --- Data loading helpers ---
@st.cache_data
def load_ods(path: str, sheet: int | str = 0) -> pd.DataFrame:
    return pd.read_excel(path, engine="odf", sheet_name=sheet)

@st.cache_data
def load_csv(path: str) -> pd.DataFrame:
    return pd.read_csv(path)

def read_data(uploaded_file: BytesIO | None) -> pd.DataFrame:
    if uploaded_file is not None:
        suffix = Path(uploaded_file.name).suffix.lower()
        if suffix == ".ods":
            df_raw = pd.read_excel(uploaded_file, engine="odf", sheet_name=0)
        elif suffix == ".csv":
            df_raw = pd.read_csv(uploaded_file)
        elif suffix in (".xlsx", ".xls"):
            df_raw = pd.read_excel(uploaded_file, sheet_name=0)
        else:
            st.error("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: .ods, .xlsx, .xls, .csv")
            st.stop()
    else:
        # fallback: –æ–∂–∏–¥–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        # data/report.ods –∏–ª–∏ data/report.csv
        if Path("data/report.ods").exists():
            df_raw = load_ods("data/report.ods", 0)
        elif Path("data/report.csv").exists():
            df_raw = load_csv("data/report.csv")
        else:
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.ods/.xlsx/.csv) —Å —Ç–∞–±–ª–∏—Ü–µ–π (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ).")
            st.stop()
    return df_raw

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (.ods/.xlsx/.csv). –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ data/", type=["ods","xlsx","xls","csv"])
df_raw = read_data(uploaded)

# --- Extract columns exactly like in your ODS layout ---
# A: –ú–µ—Å—è—Ü; B: Google –∫–ª–∏–∫–∏; C: Google CPC; D: Google –ó–∞—Ç—Ä–∞—Ç—ã; E: Google –ü–æ–∫–∞–∑—ã
# F: eBay –∫–ª–∏–∫–∏; G: eBay –ü–æ–∫–∞–∑—ã; H: eBay –ü–æ–∫—É–ø–∫–∏; I: eBay –ó–∞—Ç—Ä–∞—Ç—ã
# J: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É; K: –ü–æ–∫—É–ø–∫–∏; L: –¶–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
# M: SEO –∫–ª–∏–∫–∏; N: SEO –ø–æ–∫–∞–∑—ã; O: SEO –ø–æ–∑–∏—Ü–∏—è

# guard on header row: row 0 is headers, start from row 1
months = df_raw.iloc[1:, 0].reset_index(drop=True).astype(str)

def num(col_idx):
    return pd.to_numeric(df_raw.iloc[1:, col_idx].reset_index(drop=True), errors="coerce")

g_clicks = num(1)
g_cpc    = num(2)
g_cost   = num(3)
g_impr   = num(4)

eb_clicks = num(5)
eb_impr   = num(6)
eb_orders = num(7)
eb_cost   = num(8)

cart_adds = num(9)
orders    = num(10)
revenue   = num(11)

seo_clicks = num(12)
seo_impr   = num(13)
seo_pos    = num(14)

# Combined frame
df = pd.DataFrame({
    "–ú–µ—Å—è—Ü": months,
    "Google_–ö–ª–∏–∫–∏": g_clicks,
    "Google_CPC": g_cpc,
    "Google_–ó–∞—Ç—Ä–∞—Ç—ã": g_cost,
    "Google_–ü–æ–∫–∞–∑—ã": g_impr,
    "eBay_–ö–ª–∏–∫–∏": eb_clicks,
    "eBay_–ü–æ–∫–∞–∑—ã": eb_impr,
    "eBay_–ü–æ–∫—É–ø–∫–∏": eb_orders,
    "eBay_–ó–∞—Ç—Ä–∞—Ç—ã": eb_cost,
    "–î–æ–±–∞–≤–ª–µ–Ω–∏—è_–≤_–∫–æ—Ä–∑–∏–Ω—É": cart_adds,
    "–°–∞–π—Ç_–ü–æ–∫—É–ø–∫–∏": orders,
    "–¶–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫": revenue,
    "SEO_–ö–ª–∏–∫–∏": seo_clicks,
    "SEO_–ü–æ–∫–∞–∑—ã": seo_impr,
    "SEO_–ü–æ–∑–∏—Ü–∏—è": seo_pos
})

# Derived metrics
df["–í—Å–µ_–∫–ª–∏–∫–∏"] = df[["Google_–ö–ª–∏–∫–∏","eBay_–ö–ª–∏–∫–∏","SEO_–ö–ª–∏–∫–∏"]].sum(axis=1, skipna=True)

# CTR
df["CTR_Google"] = (df["Google_–ö–ª–∏–∫–∏"]/df["Google_–ü–æ–∫–∞–∑—ã"]*100)
df["CTR_eBay"]   = (df["eBay_–ö–ª–∏–∫–∏"]/df["eBay_–ü–æ–∫–∞–∑—ã"]*100)
df["CTR_SEO"]    = (df["SEO_–ö–ª–∏–∫–∏"]/df["SEO_–ü–æ–∫–∞–∑—ã"]*100)

# CR
df["CR_–ö–æ—Ä–∑–∏–Ω–∞"] = (df["–î–æ–±–∞–≤–ª–µ–Ω–∏—è_–≤_–∫–æ—Ä–∑–∏–Ω—É"]/df["–í—Å–µ_–∫–ª–∏–∫–∏"]*100)
df["CR_–ü–æ–∫—É–ø–∫–∞"] = (df["–°–∞–π—Ç_–ü–æ–∫—É–ø–∫–∏"]/df["–í—Å–µ_–∫–ª–∏–∫–∏"]*100)
df["CR_–û–ø–ª–∞—Ç–∞_–æ—Ç_–∫–æ—Ä–∑–∏–Ω—ã"] = (df["–°–∞–π—Ç_–ü–æ–∫—É–ø–∫–∏"]/df["–î–æ–±–∞–≤–ª–µ–Ω–∏—è_–≤_–∫–æ—Ä–∑–∏–Ω—É"]*100)

# ROAS/CPA (Google)
df["ROAS_Google_%"] = (df["–¶–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫"]/df["Google_–ó–∞—Ç—Ä–∞—Ç—ã"]*100)
df["CPA_Google"] = (df["Google_–ó–∞—Ç—Ä–∞—Ç—ã"]/df["–°–∞–π—Ç_–ü–æ–∫—É–ø–∫–∏"])
# ROAS/CPA (eBay) ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –∏ –ø–æ–∫—É–ø–∫–∏
df["ROAS_eBay_%"] = (df["–¶–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫"]/df["eBay_–ó–∞—Ç—Ä–∞—Ç—ã"]*100)
df["CPA_eBay"]    = (df["eBay_–ó–∞—Ç—Ä–∞—Ç—ã"]/df["eBay_–ü–æ–∫—É–ø–∫–∏"])

# --- Layout ---
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "–ö–ª–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º",
    "–í–æ—Ä–æ–Ω–∫–∏",
    "CTR / CR",
    "ROAS / CPA",
    "–ó–∞–∫–∞–∑—ã –∏ –≤—ã—Ä—É—á–∫–∞"
])

with tab1:
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Google ‚Äî –∫–ª–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
        fig, ax = plt.subplots(figsize=(7,4))
        ax.plot(df["–ú–µ—Å—è—Ü"], df["Google_–ö–ª–∏–∫–∏"], marker="o")
        ax.set_ylabel("–ö–ª–∏–∫–∏")
        ax.tick_params(axis="x", rotation=45)
        st.pyplot(fig)
    with col2:
        st.subheader("eBay –∏ SEO ‚Äî –∫–ª–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
        fig, ax = plt.subplots(figsize=(7,4))
        ax.plot(df["–ú–µ—Å—è—Ü"], df["eBay_–ö–ª–∏–∫–∏"], marker="o", label="eBay")
        ax.plot(df["–ú–µ—Å—è—Ü"], df["SEO_–ö–ª–∏–∫–∏"], marker="o", label="SEO")
        ax.legend()
        ax.set_ylabel("–ö–ª–∏–∫–∏")
        ax.tick_params(axis="x", rotation=45)
        st.pyplot(fig)

with tab2:
    st.subheader("–í–æ—Ä–æ–Ω–∫–∞ Google+SEO (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)")
    gseo_shows = (df["Google_–ü–æ–∫–∞–∑—ã"].sum(skipna=True) + df["SEO_–ü–æ–∫–∞–∑—ã"].sum(skipna=True))
    gseo_clicks = (df["Google_–ö–ª–∏–∫–∏"].sum(skipna=True) + df["SEO_–ö–ª–∏–∫–∏"].sum(skipna=True))
    gseo_cart = df["–î–æ–±–∞–≤–ª–µ–Ω–∏—è_–≤_–∫–æ—Ä–∑–∏–Ω—É"].sum(skipna=True)
    gseo_orders = df["–°–∞–π—Ç_–ü–æ–∫—É–ø–∫–∏"].sum(skipna=True)

    stages_g = ["–ü–æ–∫–∞–∑—ã","–ö–ª–∏–∫–∏","–ö–æ—Ä–∑–∏–Ω–∞","–ü–æ–∫—É–ø–∫–∏"]
    values_g = [gseo_shows, gseo_clicks, gseo_cart, gseo_orders]
    conv_g = [100]
    conv_g += [round(gseo_clicks/gseo_shows*100,2) if gseo_shows else 0]
    conv_g += [round(gseo_cart/gseo_clicks*100,2) if gseo_clicks else 0]
    conv_g += [round(gseo_orders/gseo_cart*100,2) if gseo_cart else 0]

    fig, ax = plt.subplots(figsize=(10,4))
    ax.barh(stages_g[::-1], values_g[::-1])
    ax.set_xscale("log")
    for i,(val,pct) in enumerate(zip(values_g[::-1], conv_g[::-1])):
        ax.text(val*1.1 if val>0 else 1, i, f"{int(val)} ({pct}%)", va="center")
    st.pyplot(fig)

    st.subheader("–í–æ—Ä–æ–Ω–∫–∞ eBay (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)")
    ebay_shows = df["eBay_–ü–æ–∫–∞–∑—ã"].sum(skipna=True)
    ebay_clicks = df["eBay_–ö–ª–∏–∫–∏"].sum(skipna=True)
    ebay_orders = df["eBay_–ü–æ–∫—É–ø–∫–∏"].sum(skipna=True)

    stages_e = ["–ü–æ–∫–∞–∑—ã","–ö–ª–∏–∫–∏","–ü–æ–∫—É–ø–∫–∏"]
    values_e = [ebay_shows, ebay_clicks, ebay_orders]
    conv_e = [100]
    conv_e += [round(ebay_clicks/ebay_shows*100,2) if ebay_shows else 0]
    conv_e += [round(ebay_orders/ebay_clicks*100,2) if ebay_clicks else 0]

    fig, ax = plt.subplots(figsize=(10,4))
    ax.barh(stages_e[::-1], values_e[::-1], color="orange")
    ax.set_xscale("log")
    for i,(val,pct) in enumerate(zip(values_e[::-1], conv_e[::-1])):
        ax.text(val*1.1 if val>0 else 1, i, f"{int(val)} ({pct}%)", va="center")
    st.pyplot(fig)

with tab3:
    st.subheader("CTR –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (%)")
    fig, ax = plt.subplots(figsize=(10,4))
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CTR_Google"], marker="o", label="Google")
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CTR_eBay"], marker="o", label="eBay")
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CTR_SEO"], marker="o", label="SEO")
    ax.legend()
    ax.set_ylabel("CTR %")
    ax.tick_params(axis="x", rotation=45)
    st.pyplot(fig)

    st.subheader("CR —Å–∞–π—Ç–∞ (%)")
    fig, ax = plt.subplots(figsize=(10,4))
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CR_–ö–æ—Ä–∑–∏–Ω–∞"], marker="o", label="–≤ –∫–æ—Ä–∑–∏–Ω—É –æ—Ç –∫–ª–∏–∫–æ–≤")
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CR_–ü–æ–∫—É–ø–∫–∞"], marker="o", label="–ø–æ–∫—É–ø–∫–∞ –æ—Ç –∫–ª–∏–∫–æ–≤")
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CR_–û–ø–ª–∞—Ç–∞_–æ—Ç_–∫–æ—Ä–∑–∏–Ω—ã"], marker="o", label="–ø–æ–∫—É–ø–∫–∞ –æ—Ç –∫–æ—Ä–∑–∏–Ω—ã")
    ax.legend()
    ax.set_ylabel("CR %")
    ax.tick_params(axis="x", rotation=45)
    st.pyplot(fig)

with tab4:
    st.subheader("ROAS –ø–æ Google Ads (%)")
    fig, ax = plt.subplots(figsize=(10,4))
    roas = df["ROAS_Google_%"]
    ax.plot(df["–ú–µ—Å—è—Ü"], roas, marker="o", color="green", label="ROAS Google")
    mean_roas = roas.mean(skipna=True)
    ax.axhline(mean_roas, color="red", linestyle="--", label=f"–°—Ä–µ–¥–Ω–∏–π ROAS: {mean_roas:.1f}%")
    ax.axhline(100, color="gray", linestyle=":", label="100% ‚Äî —Ç–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏")
    for x, y in zip(df["–ú–µ—Å—è—Ü"], roas):
        if pd.notna(y):
            ax.text(x, y, f"{y:.1f}%", ha="center", va="bottom", fontsize=8)
    ax.legend()
    ax.set_ylabel("ROAS %")
    ax.tick_params(axis="x", rotation=45)
    st.pyplot(fig)

    st.subheader("CPA (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞)")
    fig, ax = plt.subplots(figsize=(10,4))
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CPA_Google"], marker="o", label="CPA Google", linestyle="--")
    ax.plot(df["–ú–µ—Å—è—Ü"], df["CPA_eBay"], marker="o", label="CPA eBay", linestyle="--")
    ax.legend()
    ax.set_ylabel("‚Ç¨ –∑–∞ –∑–∞–∫–∞–∑")
    ax.tick_params(axis="x", rotation=45)
    st.pyplot(fig)

with tab5:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã—Ä—É—á–∫–∏")
    fig, ax = plt.subplots(figsize=(10,4))
    ax.plot(df["–ú–µ—Å—è—Ü"], df["–°–∞–π—Ç_–ü–æ–∫—É–ø–∫–∏"], marker="o", label="–ó–∞–∫–∞–∑—ã (–ø–æ–∫—É–ø–∫–∏)")
    ax2 = ax.twinx()
    ax2.plot(df["–ú–µ—Å—è—Ü"], df["–¶–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫"], marker="o", color="green", label="–í—ã—Ä—É—á–∫–∞ (‚Ç¨)")
    ax.tick_params(axis="x", rotation=45)
    ax.set_ylabel("–ó–∞–∫–∞–∑—ã")
    ax2.set_ylabel("‚Ç¨")
    fig.legend(loc="upper right", bbox_to_anchor=(0.9, 0.93))
    st.pyplot(fig)

st.caption("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: tabular report (.ods/.xlsx/.csv). –ì—Ä–∞—Ñ–∏–∫–∏ ‚Äî matplotlib.")
